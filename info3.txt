    Machine Coding Round

This is where company ask you to build something either in pure HTML, CSS, vanilla js or the tech stack you are getting hierd  
example- todo , fetch data from api, quiz app, Nested filter, carousal 

First and formost whenever you get asked to build something in the interview like build youtube then rather than opening 
vs-code and start typing you should ask the first question which is what are the requirements 
second - features to develop 
then - tech stack 
    like with react i will use tailwind, will use redux/contextAPI for state management etc...
then spet time in planning thingd up 
    - UI design, flow , How to structure your components , Low level design
    - in simple words to discuss your apporach and to be in the same page with interviewer 

now rather than starting the project from start, intializing the project downloading the bundler, tailwind etc.. 
tell your interviewer that we will build it using create react app , that would take less time `and it would give me the 
whole app but we in the real world project we can coustomize our project like choosing our bundler and all  


So when building something , start with doing small things, for example their is a list and we have to render data of that list 
so firstly we will make it run for one list and then check does it works? and then we will use map to render    

A function that takes a component as argumnent and returns a component is known as higher order component


Debouncing ->
Debouncing in React is a technique used to delay the execution of a function until after a certain period of time has passed since it was last called.
            This is particularly useful for optimizing performance when dealing with events that fire frequently, 
            like user input in search boxes, window resizing, or button clicks.

 It increases the performance , 
    like instead of   14 api call for iphone pro max, we can do 5 , then what about 1000 coustomer calling these api
    how drastically we reduced the api call 

so when i say Debouncing 200ms
    - meaning , bwtween two key stroke if it is less then 200mx , then decline the api call 
    - if it is greater then 200ms the call the api 

Caching -> When we do an event , it could be calling an api so something then if we do the same event , rather than calling 
an API for it , it can be done by the means of caching 
So what we do is we store that api call's data into our redux store and when the same api is called , rather than calling that 
api again, we fetch it from the redux store, these is used in various places like search api
rather than giving suggestions for the same search keyword , we store into redux and give the suggestions from the store


Nested Comments - So when we open comments in youtube that comments are 2 level comments meaning , when somebody reply to it
they gets showed inside it , but when we see the comments of reddit , they are nested comments or also known as n level comments
These could be more understood if see the picture of nested comments online , we are building these into our app , where also we
will learn recursion of component in React , these could be understood by the means of code -->



Live Chat
we can see their is an page where data is coming at a flow , or we can say that the data is getting changed constantly
so we now know the problem which is the data which is being coming at a constant pace, where thousands of user are chating it 
how we are getting the data and the another challange is updating the data on our app , we can see that we are appending a div
which has some text in it and showing some comment , the question arises , if we append a div then after an hour or two the user's 
applicaion must be bloted and must get freeze and we are pushing data into it , but that is not the case for youtube , so how does 
it manages ? let's dive deep into it now



so talking about live data -->  to handle the live data for our app we can do the following 
1. web Sockets
     It is a two way communication , where handshake is done between the frontend and the server and in between the data 
     will be flowing in to our app , here anyone can send data and the data coming from the server doesn't have a fixed flow
     Anytime the data is flowen in the app
    example- whatsapp, trading app

2. API Pooling / Long Pooling
    It is line one way communication where the frontend calls the server at an interval and the data is been flowen 
    from the server to our app at a constant interval
    example- simplyart, gmail, Cricbuzz , Youtube live 

Depending upon the usecase we use each method 

Now coming on youtube ,
We will be building live functionality through which we would be learning various things

Youtube live chat does API Pooling , rather than Web Sockets
Now When we see the chat of yt live , we can see that the comments made by user's are getting appedned 
in our dom , then the question arises if so many data gets appended in the app then the app/web page
must get frozen, but what happens behind the scenes is that , after a certain point /Comments youtube
starts removing the comments from the chat 

In these way the app doesn't get bloted / freeze

youtube goes a mile further by doing things like if my browser version is older , or i am using firefox
or using internet explorer , then keep the comment limit to XYZ , these is how yt makes best user experience


-----------------------------------------------------------------------------------------------------------------
useMemo --> it is a hook that is used to cache the result between re-render's 
when creating large applicaion , during re-rendering of any state , we all know that the whole 
component is re-rendered when the state is being changed , so if their is any heavy operations going in the component 
then it will be called again , heavy in terms of computaional heavy , browser heavy , so these calcualtion , or things like 
that will be called again , so  such type of issue can be handled using useMemo hook 

const cachedValue = useMemo(calculateValue, dependencies)

here calculateValue , is the value that might be coming from any function , and we are storing that value , so between re -render
that value is shown , and dependencies is an array , that tells that call the calculateValue , when and only the dependencies changes


useCallback --> is a hook that lets you cache a function defination between re-renders


useRef --> is a hook that let you reference a value that's not needed for rendering

So in simple words --> useRef lets you store a variable which is persisted , which means its value gets stored even though 
rendering takes places
example -> their is let variable and we use it internally in our component , but when the component is re-render then the 
value of the let variable gets refreshed , and these is core javascript thing, as our component in the end of the day is 
a function , so when a function is executed , it get's its own lexical environment and all.. 
so the let variable gets wiped out when our component re-render, but if the same variable is ref then the react persists
its value meaning react will store its value and the value will not be wiped even though re-rendering happens 

Also most important , updating use ref doesn't generate re-render, unlike state that generates re-render








To do 
Infinite Scroll
How to bypass corss error without extension
give chatgpt your answer to comment which are adding in the dom , by the means of react-virtual dom and reconsiliation
in the params - api i had given ?= , what is the proper name and how to access in the component 
e.preventdefault() , what is e in detail also , what are the other things i am missing when it comes to e.preventDefault()
React Strictmode 

in the vedio , the given example of useMemo can be solved by useEffect ? check it and say 



