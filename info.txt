a simple react app is like importing react 
we can inject react into our  html file without using create react app,
or any other framework...
it can just be  used inside script 

The one thing using cdn (content delivery network) link doesn't work if internet is not connect
because cdn link is hosted online 

so to make it locally we have to install react locally

we can create a react element just like we create using vanilla javascript 

syntax ->  React.createElement('a',{href:"dwwdw.com"},click)
it takes 3 arguments and returns a a tag/element'
in the object we can put anything we want not just id, class, href.. these is known as props (properties )
when we log it , it shows that it is an object . so we can say that it returns an object 

React.createElement ==> object ==> HTML(DOM)


when we pass the react element / inject it into our html page
it parses the create element and inject our element into html

syntax -> ReactDOM.createRoot()
        root.render()

we uses ReactDOM because it is the react implementation for webpage
React is our core library and ReactDOM is its implementation for webpage
and render is the method inside ReactDOM    

#NOTE
so the render method only applies on react root/ not on native DOM element
meaning before react 18 we use to use ReactDOM.render(component you wanted to render , root you want to render at)

but after react18 we made it spereatly to render it so we first create a root and then render it.

so finally we can say that render only works on react root 

---------------------

BUNDLER - it is used to optimize our js app..
thier are various BUNDLER like vite, parcel,webpack 

bundler is a kind of package
and a package need package-manager
npm/yarn is a package-manager


Our react app requires various packages in order to make it smoothly
like it requires to minify our project, optimize it , bundle it together 
thus it takes other packages 


so inorder to manage the package we use npm, these makes all the Dependencies into one 
we have other options like yarn

we uses npm init -y  in order to install npm  which is a package manager
so from now onwards we uses npm to install other library into our project 
and bundler like parcel to ignite our app 
npm install -D parcel 
        -D means we are taking development verion of parcel (Dev Dependency)
        in simple words it gets install into our development environment 

syntax-->   "devDependencies": {
    "parcel": "^2.14.4"
}
this gets injected to our package.json file 

Dependency means out projcet is dependent on packages


also about the terminologies we should aware of 
^ --> these is known as carot,meaning : it will update you to all future patch versions, without incrementing the minor version. ~1.2.3 will use releases from 1.2.3 to <1.3.
~ --> these is known as tilde, meaning :It will update you to all future minor/patch versions, without incrementing the major version. ^2.3.4 will use releases from 2.3.4 to <3.0.0
  


what is package-lock.json
package-lock.json is the final/ production verison of our project.. it locks various things like the verion of parcel
like we our ^(carrot) upgrades the version locally but the package.lock, doesn't affects our production code 

so if we put our package-lock.json in git ignore then it creates issure like it is working in my pc but doesn't work in production

node modules is like a database of our npm, it stores all the Dependency, minifiers(it optimize our code)
we should not add node modules into our github , because our package-lock.json has sufficient information to generate the node modules
node modules are too high thus we should never sent it to github



now we have so many Dependencies in our node modules and also it is better so install react in our local server
as it is each to fetch react locally then depending for cdn 
syntax->
        npm install react

also we have to install react DOM
syntax->
        npm install react-dom 

to ignite our app we uses 
syntax->
        npx parcel index.html



--------

also we can't just import in our script file, in order to do it we have to make the script type as modules
React and other modern libraries (like ReactDOM) are written as ES modules, which use the import/export syntax.
This syntax only works in scripts that are declared as type "module".


we can see that if we make any changes in our file it automatically  gets reflected , without us have to refresh it 

these is known as hot module reload (HMR), and who make changes? -> parcel
parcel uses file file watcher algorithm which dectes any changes made into our file and reflects it 



---------
few configs in our package.json
the main:"app.js" -> these refers to the entry point 
        meaning from these point our project starts/begins
        but using parcel we explicitly tell where to start so we don't need these

-----------
what is parcel-cache file
parcel automatically does HMR, so it keep track of the files, so inorder to do, it need some space ,and it uses parcel-cache as its space

-------
what is dist file / build      

SO when you build your project meaning sent it to production, dist file makes stores out build files meaning it 
minifies our project and store it in a efficient way, 
dist creates a faster development version of our project
 

 
------------------
what does parcel does ?
        HMR - Hot module replacement 
        Bundling 
        minify
        Cleaning the code 
        Dev and production build 
        Super-Fast build algorithm
        Image Optimization
        Caching while development
        Compression
        Compatble with older verion of browser 
        Https on dev
        port number
        Consistent hashing algorithm
        Zero Config
        Transitive Dependencies --> Dependency depending on other Dependency
        Tree-shaking -> removing unwanted code 



-----------------
Why is react fast ?
react itself is very fast , not only it has virtual dom but it has other things like bundler, why does various 
things as above mentioned, it act as a catalyst.


--------
Dependency Tree
our react and parcel has various Dependencies, they form a tree like structure because other other Dependencies they relay on 
these is known as Dependency tree 


-------------
browserlist 
browser list is a props in our package.json which is also in build in our parcel bundler
it provides with how many browser  is our app compatible with
adding something into it means that it will be always be running/ optimized onto that perticular browser 

some browser supports older verison  of code thus we have to convert our code 
and bable converts our newer code into older code 
in simple words our browserlist takes which you want your app to be support 
and bable convers it into the older version of it  , that older version of code is known as pollyfill 


---------------------
parcel doesn't remove console log, so we  have to install a plugin to remove console log 
also you will get to know who to install plugin

go to bable plugin console log remove, and copy the code 
it will reflect in our npm(package.json)



--------------------------------
Key warning 
when we pass childern into our react element 
it gives warning like the child must have unique Key
these is due to 2 stuff
1. react does it so that it can optimize our rendering phase 
   meaning if their is a list and we add another list with one more element in it 
   then react gives us warning of childern must have unique Key
2. also if we want to fetch then in react we do it on the basis of key 

so giving key would make re-rendering easy 


---------------
if we want to create a navbar from what we have learnt till now it would be hard in terms of like we 
have to append many childs to it, so we uses JSX to make it smoothly

JSX

bable is the one which parses these kind of syntax, it looks like html in js but it is  html like element known as jsx expression
const head = (
        <h1 key:"dwdw" >
        hello 
        </h1>
)this is also known as element 

jsx uses react.createElement ==> object==> HTML(DOM)   --> these is internal working 

also when we pass key as a prop to a component then we can't use it inside that component, like their is a componet 
that returns some jsx and in the component we did some logic and we used key like prop.key, then if we thought that 
we can use it like these, then we can't props.key will give us undefined 



---------------
their are  2 package-lock.json
second one was inside the node modules , second one keep the track of Transitive Dependencies, all the files inside the 
node modules are the one which get tracked using the second package-lock.json


---------------
Component
types of component 
1. functional component
2. class based component


1. functional component
it is normal js function which returns a piece of jsx 
syntax --> name of component starts with capital leter (convention)

const Header = ()=>{
    return <h2>HEllo </h2>
}
     

Component Composition --> when we uses component inside a component is known as component Composition

--------------
Bable also converts/transpile jsx meaning it accepts the syntax of jsx and 
convert the code so the code we write in jsx, bable which is present in node modules
which again came from parcel does it 


--------------
Any piece of jsx we write it must only have one parent component
jsx can only have one parent 

 
React.Fragment ->  it is a component(element) which react give inorder to bundle things
it is like a empty tag -> <></>  





--------
Config driven UI -> our UI changes based on situation
we control our UI based on configurations 

--------
props 
 they are like attribute,  which gets passes into the function
 props bind the attribute in the form of object so we can't use the attribute directly 
 in order to access the value inside the props we have to just access it the way we access a object

 so the senario would be props={
        attribute:value,
        attribute2:value
 }

we we can destructure it and pass only the variable which is required , that can be done too 

--------------------
virtual dom - it is a representation of the actual dom 

         and react ueses reconsiliation algorithm to differentiate one tree with another
         to find out what needs to be updated and it rerenders the node and its childern part  that is changed 
        the process is known as reconsiliation
        diff algorithm is the one which differentiate between the changes in the new tree and the previous tree, with respect to its node 
it differentiate btwn element of the node (childern) on the basis of key

----------------------

Exporting the component 
2 ways to do it 

1.default export --> where we can only export one component 
 while importing it we can normally import it the way we use to import 
 we can also rename the import if we use default export

2. named Export --> where we export a perticular constant and while importing 
 it we have to extract a that from like we use to import createRoot from react-dom

if their are multiple exports and when importing it we can import it all together
like import * as XYZ , then use XYZ.header 

---------------
we also create a config.js file , in which we put all the hardcoded stuff 
it is a convention , some companys uses constants file   
  
-------------------

local varibale in react , we can't change it the way we use to do it in vanilla js 
we need a react varibale  , a react variable is a kind of state variable

every component in react maintains a state, so we can put varibale into that state
everytime you have to put local variable you use state in it  

so we uses  useState hook to create a varibale in react
hook is just a function, every hook has a specific function


useState --> it is used to create a local state variable and 
useState is a function which returns a array where first element is a variable a
and second element  a function which changes the variable


why to need useState-->  when we use js variable in react and if we update it , react can't able to
keep up/ know that it is updated , and won't be re-rendering 
so react came up with react varibale, and changing it would re-render the UI 
react keeps a track of state variable
react has one way binding meaning chaning one thing wouldn't change at other place unless done explicitly


---------------
how rendering is being handled by react-- in a good way, like it checks the state variable being changed and it automatically 
renders it  



-----------
a fundamental thing --> a array of string and i want to return a array which has target, inside filter should i use includes or == ?
includes will return a array if has a substring , and == will only return the exact value , if not understanding what i said just chatgpt the
exact thing 



------------
React fibre is the implementation of reacts algorithm for rendering.
it is a complete new way to rendering unlike virtual dom where rendering was done through reconsiliation
virtual dom is in simple words the reconsiliation algorithm, now we use react fibre meaning thier is no virtual dom
it address the issue like animation,layout and gesture 
like if their were one state which got affected and while rendering it another state also came to render , 
so rather than doing both one by one why not do it all at once 
features of fibre over reconsiliation is it provides priority to state, also it somewhat wait for a time to re-render multiple things

fibre features-
        pause work and come back later
        assign priority to different type of work
        abort work if no longer needed 
   
----------------------
Re-rendering and component changing
so if their is a component and inside it we change a state of it, so the whole component will be
re-render and only the changes part will be updated by the means of diff algorithm



-----------
MicroService
Instade of one project we have different project for UI, API, notification , logs etc
thse architecture is known as MicroService
sepreation of concern        




Monolithic
thier is only one project and all the parts like sms, API, UI, notification all the code in one project
these architecture is known as monolith



---------------------
useEffect
        it is a hook which is used to do something , when its Dependency gets hit 
        it takes a callback function
 it is called once after the render 



-------------------------
NOTE ->
        so we say that inside  {} we say that we can write any piece of js in it 
        but we can't write like {
                let a =10;
                console.log(a)
        } 
        we can't do it , we can only write js expression on it 
        their is a difference btwn js expression and statement

        but in order to run it we can do , by converting it into statement
        {
                ((a=10),console.log(a))
        }


----------------
React Router Dom package is used to route between pages 
to install it use npm install react-router-dom

so like routing means if we want to got to other page
like if we click swiggy.com and click on a resturant 
then it goes to swiggy.com/resturant
these is known as rounting 


so in order to do it we will have to config the routing 
so first is to extract the router from the package we installed 

we uses createBrowserRouter as a router , and import it from react-router

so createBrowserRouter is used to specify all the rounting rotues 
here we mentione all the routing inside it 

also we also need to tell out app that these is our routings 
to do it we have RouterProvider from react-router
it is a component which we place in render and as a prop we pass our routing routes 
also it is compulsory to use router as our prop-name

import {createBrowserRouter,RouterProvider} from 'react-router';

const routers= createBrowserRouter([
    {
        path:"/",
        element:<Layout/>
    },
    {
        path:"/about",
        element:<About/>
    }
]) 
root.render(<RouterProvider router={routers} />);



-----------
also out react-router provieds with error handing too 
so react-router provides with a hook -> useRouteError
so these hook automatically catches what type of error it is 
and provides an output accordingly


---------------
now how to go to another pages 
so in plain html we uses <a>  tag and then in href we used to write ="/about"
so these way we will route to other pages

but these causes the whole page to re-render , so react-router provides us with 
a link tag , these is similar to a tag and we uses to="/about" 
for redirecting it to a target page

but when we see in html dom it will show a <a> tag , so internally link tag uses 
<a> tag , and gets converted to <a> tag 


------------
dynamic routing , multi-rounting, conditional rounting
Outlet



-----------
when we route our pages from one page to another and we want to put something like our header and footer as common we uses 
dynamic rounting or also known as multi-routing where we have a parent element and add childern to it
as a concept lets understand first and then the code 
suppose we have a parent layout , what does it have it have 3 component 
a header, body and a footer 
then we have a child component which is about page and as a whole page it also have  footer and header in it 
so what we do , we take the common part and also we use dynamic routing 
meaning we will go from our parent's route to our child's route 

so in the rotuer, which is our createBrowserRouter( ), in the parent object , we will add our childern which is about in it 
and we will specify path to it, and when the route is hit it will go to it 
also we have to specify how it will render , we have only specifyed its route, not we have to add Outlet which is from Our
react-router package

Outlet is used to render out childern's 

code -> 
const Layout =()=>{
    return(
        <>
        <Header/>
        <Outlet/>
        <Footer/>
        </>
    )
}

const routers= createBrowserRouter([
    {
        path:"/",
        element:<Layout/>,
        errorElement:<Error/>,
        children:[
            {   path:"/contact",
                element:<Contact/>
            },
            {
                path:"/",
                element:<Body/>
            },{
                path:"/about",
                element:<About/>
            },
            {
                path:"/resturant/:id",
                element:<Cards />
            }
        ]

    },
]) 

if we want to nested our router

also i don't know that if we had dynamic routing meanig we had : in our url and then anything 
after it would be dynamic, 
        example -> url-> abc/:id
so if we call abc/odod ,then anything after abc would be dynamic and react will say that does it match inital path 
and after that it is dynamic 

so the thing to be remembered is that when we use useParams hook to get what we have called in the dynamic part 
it will return us an object based on what we have written in the dynamic path

like it will return us the id:"odod" ,as we have written id as our key in the dynamic path 





------------------------
Class based Component

just like functional component at the end of the day is a function 
similarlly class based component is a class

syntax-->
we have to tell react that these class is a component class not just
a simple class , here we have a render method , just we have to return in render

class profile extends React.Component{
    render(){
        return (
            <></>
        )
    }
}

so the term render, re-render for our component comes from here as their is no redern 
in the functional component, but we always say that it gets render, so the term render in 
component comes from class based component 


we can dop the same thing like creating a state and managing it too
syntax

class profile extends React.Component{
    constructor(props){
        super(props)

        this.state({
            count:0
        })
    }
    render(){
        return (
            <button onclick={()=>{
                this.setState({
                    count:{this.state.count}+1
                })
            }}></>
            <h1>this.props.name</h2> (way of accessing a prop)
        )
    }
}

-----------------------------

so when we do multi routing like when we have multiple childern
 and  we know that we use Outlet to render childern , but what if we want to pass props 
 to childern in Outlet, so we have to do 2 things 

 first while sending something in props we have to name out prop as context={the data we are sending }

and in order to use it we have to use a hook called as useOutletContext, which is used to catch the props 
const data = useOutletContext()

in  these way we send and recive props in Outlet



--------------------------------------


























-------------------------------------------

now while learing basics about the classbased component we have few component inside it 
which are 
componentdidMount() which is called after intial render --> best for API call 
componentupdate() which is called after every state change (render) 
componentwillunmount() which is called after every component's unmounthing , when we stwitch to another Component

this could be understand by the follow lifecycle diagram , remember it is only for classbased component

https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/

also adding into it, we have 2 phase in out lifecycle, render phase and commit phase 
our constructor and render is in render phase 
and our commit phase will have changing the dom componentdidMount


this could be understood by the means of an example
their is a parent component 
then we have 2 child component 

what would be the rendering process be like --> all are classbased component 

parent constructor 
parent render
child1 constructor
child1 render
child2 constructor
child2 render 
chil1 componentdidMount
child2 componentdidMount
parent componentdidMount



 React waits until all children are mounted and their side effects are handled, 
 then fires componentDidMount on the parent.


--------------------------------
similar to these we have in our functional component is useEffect
we can pass an [] , in useEffect , so it will call only once and after render
also similar to componentwillunmount, we have return in useEffect , that 
would be returned once it gets unmounted,meaning after the component is changed


---------------------------
async and await's rendering
so when we write a async function in react , especially in useEffect, then the execution context is little different
so when thier is async we know that it will parallel start execution , but when await hit reacts checks that is their 
any render left ? like any state update, i have left to render, as we know that react batches the state update




-------------------------------
custom hook (useablility, readability, sepreation of concern , Testable, Maintainable)

custom hook is a helper function which have a logic in it and returns some data
it is like grouping logic and state, where logic is performed , is known as custom hook

the one thing to be remember is that when we create a state inside our custom hook then the changes 
or state updates inside it that it will reflect in the component where we called custom hook 

example--> const data = useResturant(id);

so useResturant is our custom hook and it will return resturant details for that id , and we have created a state in the useResturant, then 
if the state changes it will refect in the data too 
it is like makeing a state but here a value is given to us based on some attribute it is like writing 
        const[resturantDetails,setResturantDetails]= useState()
just a difference is here we get some value based on my input 



it changes the way we think and write code , like if someone says in my project that i want to build a feature
then we would build a custom hook and offload all the logic to it , and then our main component will use that hook 
and get the required result and do rendering accordingly


-------------------------------
Chunking / Code Splitting / dynamic bundling / lazy loading / On-Demand loading / Dynamic Import

when the app gets large in terms of component , our bundler combines all the file into 1 js file 
but it is not good to sent all the app once, like bundle it all together, these makes our app slow 
it is good to break the file into meaningful parts (logical bundles)

so lets suppose their is an instamart portion which has 100 component in it, it is all together a diffrent section
here section means like a another part , all the parts gets differentiate in the system design by the senior developers
so lets first understand how to do it, we got to know that where to do it (in instamart we need to do it ), but now how to do it 


so in our header we have instamart link , and it consist of 100's of component in it 
so lazy loading is mentioned in the component which we are importing it, in simple words we are importing our instamart into the app.js 
where all the path is mentioned, here is the place we do lazy loading 

so we will import differently 
syntax --> const Instamart= lazy(()=>import("./instamart"))

but on the first click it won't be rendered as when react tries to load it , it doesn't have the script of that 
component at the moment as in the network we can see like it took 30ms to load the instamart script 
but when we come back and front again we can see , as now the script is loaded 

although we can't see these problem locally as our bundler will load things fast and also preloads the chuck files too
but in production it is different 
so when we do lazy we have to use suspense  
  

so we have wrap it, syntax-->      {
                path:"/instamart",
                element: <Suspense fallback={<Simmer/>} >
                            <Instamart />
                        </Suspense>
            }

also it takes fallback as a prop where we can pass a component which will be  shown till our instamart is not loaded 






-------------------
This is the second time i am writing about react lifecycle it is more clearner and simpler view about react

So the lifecycle of classbased component , i am talking about class based component will begins as follows

when the classbased component is loaded then first thing is called is the render phase 
the render phase consist of constructor and render respectively 
when intially the first time component is loaded then it is in the mouting phase
so first constructor is called and then render is called 
let suppose thier is another component inside our component when we are rendering 
so then the child component's lifecycle is called 
so child components constructor  is called then its render is called 
These is the completion of our render phase and also our mouting phase which is called 
on the intial render/ first time when it is rendered 

Now comes the commit phase->    
still i am in the mouting phase but its commit's part i am talking about now 

the first thing which will be called is componentdidMount -> in simple word is does my component completed 
the lifecycle then it is called , 
so firstly childs component did mount is called then 
parents component did mount is called, 

It is the best place to make api call , why ? cause in the functional component what 
we used to do is that when the DOM is loaded/ inital render is completed then we updated the 
DOM / then we inserted the data , that's why we saw Simmer UI 


* Edge case -> when their are two child component then which commit phase will be executed first when it comes 
to instial render that means which child will execute its componentDidMount first as it is intial render

let suppose their are two child 
                                <child1 /> 
                                <child2/>
then first child1 componentDidMount is called then child2 componentDidMount is called and then
parrent componentDidMount is called 
why --> because the parent component is not fully mounted until the the child component is mounted
and why child1 componentdidMount is called first then child2 componentDidMount ? because child1 got rendered first then child2


Now these was the 1st step which is also known as mouting phase 
if re-rendering takes place then what are the following steps ?
and how will re-rendering took place ? if their is new prop , setState, forceUpdate 
then re-rendering takes place and componentdidUpdate tookplace 
componentdidUpdate will be called after every render , after intial render
and the sequence is child1 componentdidUpdate then child2 componentdidUpdate then 
Parent componentdidUpdate


and finally componentwillunmount be called when the component gets removed 
in simple words when component is not used / we got redirected then it will be called 












to complete
cart feature


------------------------------
knowlegde
Formik ---> is a package which helps to make form easily 
make your code follow these 5 practice 
Modular -> meaningfuly broken our code into piece
Reuseale -> 
Maintainable
Testable
Cleaner 



Never compare react's lifecycle for functional component


---------------------------








to write









Que?
cdn
why cdn to store img 
componentdidMount is async and useEffect can't make async why ?
we i wrote simple resturant in body , but in dom it is showing some different html , like data-discovery = true , why?
 



to complete
create a hook returning -->  [var,setVar]
forms in react  



to learn
hmr server
client side rendering server side rendering
routing 
react router
cdn
createHash rotuer
other router than create browser router
classbased component --> constructor->super(props)
behind the scenes of setstate in classbased
how rendering is done in my code --> each component rerender one 
redux thunk
multithread in js 
creating your own library





learn today
passing props in the nested routing 
class based component 
redux--> action
reducer
slice
store
state












---------
General Ans --> why our app is fast ?
it is not just because of reacts virtual dom , but because of parcel , bundlers, react's reconsiliation algorithm
react fibre , react-router, minification etc....










